# 1-2 버전관리 개요

버전 관리 필요성: 지난 어느 시점의 파일이나 소스의 내용을 확인해 보고 그 상태로 되돌리고 싶을 때

버전 관리 개념: 파일의 추가 및 수정 이력 관리 (누가, 저장소가 여러 개인 경우, 어느 파일을, 언제, 어디를, 어떻게(추가, 수정, 내용))
- 시간의 흐름에 따라 파일 집합에 대한 변경 사항을 추적, 관리
- 필요하면 과거 어느 시점으로 이동

명령어 줄 인터페이스 방식: 텍스트로 명령을 입력하고 결과도 텍트스로 표시되는 인터페이스 방식
그래픽 사용자 인터페이스 방식: 윈도처럼 그래픽 대화 화면에서 마우스와 텍스트의 입력 방식으로 명령을 입력하고 결과가 표시되는 인터페이스 방ㅛㅣㅅ

커밋: 저장소의 현 상태를 저장하는 행위 -> 파일 집합의 변경 내용을 깃 저장소에 기록하는 작업
- 시간순으로 저장 (저장소: 연속된 커밋으로 관리 + 파일이 달라지지 않았으면 파일을 새로 저장하지 않음)
저장소: 파일이나 폴더를 저장해 두는 곳
- 원격 저장소: 파일이 원격 저장소 전용 서버에서 관리되며 여러 사람이 함께 공유하기 위한 저장소
- 지역 저장소: 내 pc에 파일이 저장되는 개인 전용 저장소

clone: 서버의 원격 저장소를 지역 저장소에 복제
push: 서버인 원격저장소로 올리기
pull: 지역 저장소로 내리기
파일을 저장소에 저장하는 명령어: add, commit

git: 가장 많이 활용되는 분산 버전 관리 시스템

# 1-3 깃과 깃허브 개요

git: 컴퓨터 파일의 변경을 추적하는 데 사용되는 버전 관리 시스템 (2005년 리누스 토발즈 개발) -> 설치 시 git bash, git gui 두 개의 sw 제공

장점: 모든 개발자가 지역 시스템에 코드의 전체 사본 소유
기능: 여러 개발자가 함께 작업, 소스 코드의 변경 사항을 추적하는 데 사용, 소스 코드 관리에 분산 버전 제어 도구가 사용, 여러 개의 평행 분기를 통해 비선형 개발을 지원

git bash: 명령 행 인터페이스

깃 내부 저장소 상태
-작업 디렉토리
-작업 공간, 작업 트리: modified, untracked
-스테이징 영역: staged, indexed
-깃 저장소: Commited
-임시 저장소: stash

branch: 새로운 수정을 할 수 있는 또 다른 버전의 작업 흐름

github: 버전 관리를 위한 서버 저장소 및 프로젝트 개발을 위한 협업 관리 서비스
- 세계 최대의 오픈소스 공유 플랫폼
- 무료 서비스 사용 시 공개 저장소만 사용 가능
